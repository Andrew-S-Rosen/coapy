var __index = {"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"coapy","text":"<p>Welcome to the documentation for <code>coapy</code>, a Python package for generating a list of collaborators suitable for an NSF Collaborators and Other Affiliations (COA) document.</p>"},{"location":"install.html","title":"Install","text":""},{"location":"install.html#pre-requisites","title":"Pre-Requisites","text":"<p>You will need to have Python on your machine. If you do not, follow the instructions below:</p> <ol> <li>Install Python 3.9+, preferably in conjunction with an environment manager. For instance, download and run the Miniconda installer</li> <li>When asked to add Miniconda to your <code>PATH</code>, select yes</li> </ol>"},{"location":"install.html#installation","title":"Installation","text":"<p>In the terminal, run the following:</p> <pre><code>pip install git+https://github.com/Andrew-S-Rosen/coapy.git\n</code></pre>"},{"location":"usage.html","title":"Usage","text":""},{"location":"usage.html#pre-requisites","title":"Pre-Requisites","text":"<p>Fetch your Google Scholar ID, which is the string of letters and numbers in the URL of your Google Scholar profile page between <code>user=</code> and <code>&amp;hl=</code>.</p>"},{"location":"usage.html#examples","title":"Examples","text":"<p>If generating an NSF COA report, all you need to do is the following. By default, the code will write out a CSV file <code>\"coauthors.csv\"</code> to the current working directory.</p> <pre><code>from coapy.scholar import get_coauthors\n\nscholar_id = \"lHBjgLsAAAAJ\"  # Google Scholar ID\nmy_coauthors = get_coauthors(scholar_id=scholar_id)\nprint(my_coauthors)\n</code></pre> <p>If for any reason you need to get &gt;4 years of data, this can be modified as follows:</p> <pre><code>from coapy.scholar import get_coauthors\n\nscholar_id = \"lHBjgLsAAAAJ\"  # Google Scholar ID\nmy_coauthors = get_coauthors(scholar_id=scholar_id, years_back=5)\nprint(my_coauthors)\n</code></pre>"},{"location":"about/changelog.html","title":"Changelog","text":"CHANGELOG.md<pre><code># Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [0.0.2]\n\n### Added\n\n- Added a progress bar\n- A CSV file will be written out by default\n\n### Fixed\n\n- Fixed `years_back` parsing\n\n## [0.0.1]\n\n### Added\n\n- The initial release!\n</code></pre>"},{"location":"about/conduct.html","title":"Code of Conduct","text":""},{"location":"about/conduct.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"about/conduct.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/conduct.html#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"about/conduct.html#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"about/conduct.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"about/conduct.html#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"about/conduct.html#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"about/conduct.html#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"about/conduct.html#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"about/conduct.html#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"about/conduct.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"about/license.html","title":"License","text":"LICENSE.md<pre><code>BSD 3-Clause License\n\nCopyright (c) 2023\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>coapy<ul> <li>scholar</li> </ul> </li> </ul>"},{"location":"reference/coapy/scholar.html","title":"scholar","text":""},{"location":"reference/coapy/scholar.html#coapy.scholar._dump_to_csv","title":"_dump_to_csv","text":"<pre><code>_dump_to_csv(co_authors, filename='coauthors.csv')\n</code></pre> <p>Dump a list of coauthors to a CSV file.</p> <p>Parameters:</p> <ul> <li> <code>co_authors</code>               (<code>list[str]</code>)           \u2013            <p>List of coauthors.</p> </li> <li> <code>filename</code>               (<code>str | Path</code>, default:                   <code>'coauthors.csv'</code> )           \u2013            <p>Name of the CSV file to write to.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>coapy/scholar.py</code> <pre><code>def _dump_to_csv(co_authors: list[str], filename: str | Path = \"coauthors.csv\") -&gt; None:\n    \"\"\"\n    Dump a list of coauthors to a CSV file.\n\n    Parameters\n    ----------\n    co_authors : list[str]\n        List of coauthors.\n    filename : str | Path\n        Name of the CSV file to write to.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    with Path(filename).open(mode=\"w\", encoding=\"utf-8\") as f:\n        for coauthor in co_authors:\n            f.write(f\"{coauthor}\\n\")\n</code></pre>"},{"location":"reference/coapy/scholar.html#coapy.scholar._get_coauthors_from_pubs","title":"_get_coauthors_from_pubs","text":"<pre><code>_get_coauthors_from_pubs(papers, year_cutoff=None, my_name=None)\n</code></pre> <p>Get a de-duplicated list of co-authors from a list of publications.</p> <p>Parameters:</p> <ul> <li> <code>papers</code>               (<code>list[Publication]</code>)           \u2013            <p>List of publications.</p> </li> <li> <code>year_cutoff</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Year before which to ignore publications. If set to <code>None</code>, all publications will be considered.</p> </li> <li> <code>my_name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of the author. If set to <code>None</code>, the author will still be included in the list of co-authors.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>List of co-authors.</p> </li> </ul> Source code in <code>coapy/scholar.py</code> <pre><code>def _get_coauthors_from_pubs(\n    papers: list[Publication],\n    year_cutoff: int | None = None,\n    my_name: str | None = None,\n) -&gt; list[str]:\n    \"\"\"\n    Get a de-duplicated list of co-authors from a list of publications.\n\n    Parameters\n    ----------\n    papers : list[Publication]\n        List of publications.\n    year_cutoff : int | None\n        Year before which to ignore publications. If set to `None`, all\n        publications will be considered.\n    my_name : str | None\n        Name of the author. If set to `None`, the author will still be\n        included in the list of co-authors.\n\n    Returns\n    -------\n    list[str]\n        List of co-authors.\n    \"\"\"\n\n    # Filter by year\n    current_year = datetime.date.today().year\n    if year_cutoff:\n        papers_subset = [\n            paper\n            for paper in papers\n            if int(paper[\"bib\"].get(\"pub_year\", current_year)) &gt;= year_cutoff\n        ]\n    else:\n        papers_subset = papers\n\n    # Fetch all co-authors from publications\n    all_coauthors = []\n    for paper in tqdm(papers_subset):\n        paper_full = scholarly.fill(paper, sections=[\"authors\"])\n        coauthors = paper_full[\"bib\"][\"author\"].split(\" and \")\n\n        all_coauthors.extend(coauthors)\n\n    # De-duplicate list of co-authors and remove your own name\n    all_coauthors = list(set(all_coauthors))\n    if my_name and my_name in all_coauthors:\n        all_coauthors.remove(my_name)\n\n    # Clean up list of co-authors\n    all_coauthors = _nsf_name_cleanup(all_coauthors)\n    all_coauthors.sort()\n\n    return all_coauthors\n</code></pre>"},{"location":"reference/coapy/scholar.html#coapy.scholar._get_scholar_profile","title":"_get_scholar_profile","text":"<pre><code>_get_scholar_profile(scholar_id, sections=None)\n</code></pre> <p>Given a Google Scholar ID, return the full profile.</p> <p>Parameters:</p> <ul> <li> <code>scholar_id</code>               (<code>str</code>)           \u2013            <p>Google Scholar ID of the author. This is the string of characters that appears in the URL of the author's Google Scholar profile immediately after \"citations?user=\" and before \"&amp;hl=\".</p> </li> <li> <code>sections</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Sections of the profile to return. If None, return the default sections selected by scholarly.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Author</code>           \u2013            <p>Full profile of the author.</p> </li> </ul> Source code in <code>coapy/scholar.py</code> <pre><code>def _get_scholar_profile(scholar_id: str, sections: list[str] | None = None) -&gt; Author:\n    \"\"\"\n    Given a Google Scholar ID, return the full profile.\n\n    Parameters\n    ----------\n    scholar_id : str\n        Google Scholar ID of the author. This is the string of characters\n        that appears in the URL of the author's Google Scholar profile\n        immediately after \"citations?user=\" and before \"&amp;hl=\".\n    sections : list[str] | None\n        Sections of the profile to return. If None, return the default\n        sections selected by scholarly.\n\n    Returns\n    -------\n    Author\n        Full profile of the author.\n    \"\"\"\n    if sections is None:\n        sections = []\n    profile = scholarly.search_author_id(scholar_id)\n    return scholarly.fill(profile, sections=sections)\n</code></pre>"},{"location":"reference/coapy/scholar.html#coapy.scholar._nsf_name_cleanup","title":"_nsf_name_cleanup","text":"<pre><code>_nsf_name_cleanup(coauthors)\n</code></pre> <p>Clean up names to be in the NSF format of \"Lastname, Firstname Middle\".</p> <p>Parameters:</p> <ul> <li> <code>coauthors</code>               (<code>list[str]</code>)           \u2013            <p>List of co-authors.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>List of co-authors with names cleaned up.</p> </li> </ul> Source code in <code>coapy/scholar.py</code> <pre><code>def _nsf_name_cleanup(coauthors: list[str]) -&gt; list[str]:\n    \"\"\"\n    Clean up names to be in the NSF format of \"Lastname, Firstname Middle\".\n\n    Parameters\n    ----------\n    coauthors : list[str]\n        List of co-authors.\n\n    Returns\n    -------\n    list[str]\n        List of co-authors with names cleaned up.\n    \"\"\"\n    cleaned_coauthors = []\n    for coauthor in coauthors:\n        name_parts = coauthor.split(\" \")\n        reordered_name = f\"{name_parts[-1]}, {' '.join(name_parts[:-1])}\"\n        cleaned_coauthors.append(reordered_name)\n    return cleaned_coauthors\n</code></pre>"},{"location":"reference/coapy/scholar.html#coapy.scholar.get_coauthors","title":"get_coauthors","text":"<pre><code>get_coauthors(scholar_id='lHBjgLsAAAAJ', years_back=4, filename='coauthors.csv')\n</code></pre> <p>Given a Google Scholar ID, return a list of coauthors from the past N years.</p> <p>Parameters:</p> <ul> <li> <code>scholar_id</code>               (<code>str</code>, default:                   <code>'lHBjgLsAAAAJ'</code> )           \u2013            <p>Google Scholar ID of the author. This is the string of characters that appears in the URL of the author's Google Scholar profile immediately after \"user=\" and before \"&amp;hl=\".</p> </li> <li> <code>years_back</code>               (<code>int | None</code>, default:                   <code>4</code> )           \u2013            <p>Number of years to look back for coauthors. Set to <code>None</code> for no limit.</p> </li> <li> <code>filename</code>               (<code>str | Path | None</code>, default:                   <code>'coauthors.csv'</code> )           \u2013            <p>Path to the CSV file to write to, if any.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>List of coauthors from the past N years.</p> </li> </ul> Source code in <code>coapy/scholar.py</code> <pre><code>def get_coauthors(\n    scholar_id: str = \"lHBjgLsAAAAJ\",\n    years_back: int | None = 4,\n    filename: str | Path | None = \"coauthors.csv\",\n) -&gt; list[str]:\n    \"\"\"\n    Given a Google Scholar ID, return a list of coauthors from the past N years.\n\n    Parameters\n    ----------\n    scholar_id : str\n        Google Scholar ID of the author. This is the string of characters\n        that appears in the URL of the author's Google Scholar profile\n        immediately after \"user=\" and before \"&amp;hl=\".\n    years_back : int | None\n        Number of years to look back for coauthors. Set to `None` for no limit.\n    filename : str | Path | None\n        Path to the CSV file to write to, if any.\n\n    Returns\n    -------\n    list[str]\n        List of coauthors from the past N years.\n    \"\"\"\n    today = datetime.date.today()\n    year_cutoff = (today.year - years_back) if years_back else None\n\n    profile = _get_scholar_profile(scholar_id)\n\n    co_authors = _get_coauthors_from_pubs(\n        profile[\"publications\"], year_cutoff=year_cutoff, my_name=profile[\"name\"]\n    )\n    if filename:\n        _dump_to_csv(co_authors, filename)\n    return co_authors\n</code></pre>"}]}